{
  "root": true,
  "env": {
    "browser": true,
    "es2021": true
  },
  "extends": ["eslint:recommended", "plugin:@typescript-eslint/recommended", "plugin:@angular-eslint/recommended"],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module",
    "project": ["./tsconfig.json"]
  },
  "plugins": ["@typescript-eslint", "@angular-eslint"],
  "overrides": [
    {
      "files": ["*.ts"],
      "rules": {
        "@angular-eslint/no-output-on-prefix": "off",
        "@typescript-eslint/explicit-function-return-type": ["warn", { "allowExpressions": true }],
        "@typescript-eslint/ban-types": "off",
        "@typescript-eslint/no-inferrable-types": "off",
        "@typescript-eslint/prefer-readonly": "warn",
        "no-console": ["error", { "allow": ["warn", "error"] }],
        "@typescript-eslint/naming-convention": [
          "error",
          // Add naming conventions for components, services, etc.
          {
            "selector": "default", // any default selector
            "format": ["camelCase"]
          },
          {
            "selector": "variable",
            "format": ["camelCase", "UPPER_CASE"] // just variables
          },
          {
            "selector": "variable",
            "modifiers": ["const"],
            "format": ["UPPER_CASE", "camelCase"] // constants
          },
          {
            "selector": "typeLike",
            "format": ["PascalCase"]
          },
          {
            "selector": "class",
            "format": ["PascalCase"]
          },
          {
            "selector": "parameter",
            "format": ["camelCase"],
            "leadingUnderscore": "allow"
          },
          {
            "selector": "property",
            "format": ["camelCase", "UPPER_CASE", "PascalCase"],
            "leadingUnderscore": "allow"
          },
          {
            "selector": "enumMember",
            "format": ["PascalCase", "UPPER_CASE"]
          },
          {
            "selector": "method",
            "format": ["camelCase"],
            "leadingUnderscore": "allow"
          },
          {
            "selector": "function",
            "format": ["camelCase", "PascalCase"],
            "leadingUnderscore": "allow"
          },
          {
            "selector": "memberLike",
            "format": ["camelCase", "UPPER_CASE", "PascalCase"],
            "leadingUnderscore": "allow"
          }
        ],
        "semi": ["error", "always"],
        "@typescript-eslint/no-unused-vars": ["warn", { "argsIgnorePattern": "^_" }],
        "@typescript-eslint/no-explicit-any": "off",
        "curly": ["error", "all"],
        "@typescript-eslint/explicit-member-accessibility": [
          "warn",
          {
            "accessibility": "explicit",
            "overrides": {
              "constructors": "no-public"
            },
            "ignoredMethodNames": ["transform"]
          }
        ],
        "lines-between-class-members": ["error", "always", { "exceptAfterSingleLine": true }],
        "max-len": [
          "error",
          {
            "code": 140, // For TypeScript
            "ignoreUrls": true,
            "ignoreStrings": true
          }
        ],
        "eqeqeq": "error"
      }
    },
    {
      "files": ["*.html"],
      "extends": ["plugin:@angular-eslint/template/recommended"],
      "rules": {
        "@angular-eslint/template/no-any": "warn",
        "@angular-eslint/template/banana-in-box": "error",
        "@angular-eslint/template/click-events-have-key-events": "warn",
        "@angular-eslint/template/no-negated-async": "error"
      }
    }
  ],
  "rules": {
    "@angular-eslint/no-output-rename": "off"
  }
}

